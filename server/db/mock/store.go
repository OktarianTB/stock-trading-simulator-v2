// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/OktarianTB/stock-trading-simulator-golang/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/OktarianTB/stock-trading-simulator-golang/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUserBalance mocks base method.
func (m *MockStore) AddUserBalance(arg0 context.Context, arg1 db.AddUserBalanceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserBalance", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserBalance indicates an expected call of AddUserBalance.
func (mr *MockStoreMockRecorder) AddUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserBalance", reflect.TypeOf((*MockStore)(nil).AddUserBalance), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetStockQuantityForUser mocks base method.
func (m *MockStore) GetStockQuantityForUser(arg0 context.Context, arg1 db.GetStockQuantityForUserParams) (db.GetStockQuantityForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockQuantityForUser", arg0, arg1)
	ret0, _ := ret[0].(db.GetStockQuantityForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockQuantityForUser indicates an expected call of GetStockQuantityForUser.
func (mr *MockStoreMockRecorder) GetStockQuantityForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockQuantityForUser", reflect.TypeOf((*MockStore)(nil).GetStockQuantityForUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListStockQuantitiesForUser mocks base method.
func (m *MockStore) ListStockQuantitiesForUser(arg0 context.Context, arg1 string) ([]db.ListStockQuantitiesForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStockQuantitiesForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ListStockQuantitiesForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStockQuantitiesForUser indicates an expected call of ListStockQuantitiesForUser.
func (mr *MockStoreMockRecorder) ListStockQuantitiesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStockQuantitiesForUser", reflect.TypeOf((*MockStore)(nil).ListStockQuantitiesForUser), arg0, arg1)
}

// ListTransactionsForUser mocks base method.
func (m *MockStore) ListTransactionsForUser(arg0 context.Context, arg1 db.ListTransactionsForUserParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsForUser indicates an expected call of ListTransactionsForUser.
func (mr *MockStoreMockRecorder) ListTransactionsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsForUser", reflect.TypeOf((*MockStore)(nil).ListTransactionsForUser), arg0, arg1)
}

// ListTransactionsForUserForTicker mocks base method.
func (m *MockStore) ListTransactionsForUserForTicker(arg0 context.Context, arg1 db.ListTransactionsForUserForTickerParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsForUserForTicker", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsForUserForTicker indicates an expected call of ListTransactionsForUserForTicker.
func (mr *MockStoreMockRecorder) ListTransactionsForUserForTicker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsForUserForTicker", reflect.TypeOf((*MockStore)(nil).ListTransactionsForUserForTicker), arg0, arg1)
}

// PurchaseTx mocks base method.
func (m *MockStore) PurchaseTx(arg0 context.Context, arg1 db.CreateTransactionParams) (db.TradingTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseTx", arg0, arg1)
	ret0, _ := ret[0].(db.TradingTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseTx indicates an expected call of PurchaseTx.
func (mr *MockStoreMockRecorder) PurchaseTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseTx", reflect.TypeOf((*MockStore)(nil).PurchaseTx), arg0, arg1)
}

// RemoveUserBalance mocks base method.
func (m *MockStore) RemoveUserBalance(arg0 context.Context, arg1 db.RemoveUserBalanceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserBalance", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserBalance indicates an expected call of RemoveUserBalance.
func (mr *MockStoreMockRecorder) RemoveUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserBalance", reflect.TypeOf((*MockStore)(nil).RemoveUserBalance), arg0, arg1)
}

// SellTx mocks base method.
func (m *MockStore) SellTx(arg0 context.Context, arg1 db.CreateTransactionParams) (db.TradingTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellTx", arg0, arg1)
	ret0, _ := ret[0].(db.TradingTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellTx indicates an expected call of SellTx.
func (mr *MockStoreMockRecorder) SellTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellTx", reflect.TypeOf((*MockStore)(nil).SellTx), arg0, arg1)
}
