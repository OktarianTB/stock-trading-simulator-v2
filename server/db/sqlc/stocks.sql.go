// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: stocks.sql

package db

import (
	"context"
)

const addStockQuantityForUser = `-- name: AddStockQuantityForUser :one
UPDATE stocks
SET quantity = quantity + $1
WHERE username = $2 AND ticker = $3
RETURNING username, ticker, quantity
`

type AddStockQuantityForUserParams struct {
	Quantity int64  `json:"quantity"`
	Username string `json:"username"`
	Ticker   string `json:"ticker"`
}

func (q *Queries) AddStockQuantityForUser(ctx context.Context, arg AddStockQuantityForUserParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, addStockQuantityForUser, arg.Quantity, arg.Username, arg.Ticker)
	var i Stock
	err := row.Scan(&i.Username, &i.Ticker, &i.Quantity)
	return i, err
}

const createStockEntryForUser = `-- name: CreateStockEntryForUser :one
INSERT INTO stocks (
  username,
  ticker,
  quantity
) VALUES (
  $1, $2, $3
) RETURNING username, ticker, quantity
`

type CreateStockEntryForUserParams struct {
	Username string `json:"username"`
	Ticker   string `json:"ticker"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateStockEntryForUser(ctx context.Context, arg CreateStockEntryForUserParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, createStockEntryForUser, arg.Username, arg.Ticker, arg.Quantity)
	var i Stock
	err := row.Scan(&i.Username, &i.Ticker, &i.Quantity)
	return i, err
}

const getStockForUser = `-- name: GetStockForUser :one
SELECT username, ticker, quantity FROM stocks
WHERE username = $1 AND ticker = $2 LIMIT 1
`

type GetStockForUserParams struct {
	Username string `json:"username"`
	Ticker   string `json:"ticker"`
}

func (q *Queries) GetStockForUser(ctx context.Context, arg GetStockForUserParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStockForUser, arg.Username, arg.Ticker)
	var i Stock
	err := row.Scan(&i.Username, &i.Ticker, &i.Quantity)
	return i, err
}

const listUserStocks = `-- name: ListUserStocks :many
SELECT username, ticker, quantity FROM stocks
WHERE username = $1
ORDER BY ticker
`

func (q *Queries) ListUserStocks(ctx context.Context, username string) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, listUserStocks, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Stock{}
	for rows.Next() {
		var i Stock
		if err := rows.Scan(&i.Username, &i.Ticker, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeStockQuantityForUser = `-- name: RemoveStockQuantityForUser :one
UPDATE stocks
SET quantity = quantity - $1
WHERE username = $2 AND ticker = $3
RETURNING username, ticker, quantity
`

type RemoveStockQuantityForUserParams struct {
	Quantity int64  `json:"quantity"`
	Username string `json:"username"`
	Ticker   string `json:"ticker"`
}

func (q *Queries) RemoveStockQuantityForUser(ctx context.Context, arg RemoveStockQuantityForUserParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, removeStockQuantityForUser, arg.Quantity, arg.Username, arg.Ticker)
	var i Stock
	err := row.Scan(&i.Username, &i.Ticker, &i.Quantity)
	return i, err
}
